{"version":3,"file":"static/js/387.94537724.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../node_modules/react-transition-group/esm/TransitionGroupContext.js","../node_modules/react-transition-group/esm/utils/ChildMapping.js","../node_modules/react-transition-group/esm/TransitionGroup.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/dom-helpers/esm/removeClass.js","../node_modules/react-transition-group/esm/config.js","../node_modules/react-transition-group/esm/utils/reflow.js","../node_modules/react-transition-group/esm/Transition.js","../node_modules/react-transition-group/esm/CSSTransition.js","../node_modules/dom-helpers/esm/addClass.js","../node_modules/dom-helpers/esm/hasClass.js","TodoList.js"],"sourcesContent":["function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.indexOf(n) >= 0) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };","function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nexport { _extends as default };","function _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nexport { _setPrototypeOf as default };","import setPrototypeOf from \"./setPrototypeOf.js\";\nfunction _inheritsLoose(t, o) {\n  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);\n}\nexport { _inheritsLoose as default };","import React from 'react';\nexport default React.createContext(null);","import { Children, cloneElement, isValidElement } from 'react';\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */\n\nexport function getChildMapping(children, mapFn) {\n  var mapper = function mapper(child) {\n    return mapFn && isValidElement(child) ? mapFn(child) : child;\n  };\n\n  var result = Object.create(null);\n  if (children) Children.map(children, function (c) {\n    return c;\n  }).forEach(function (child) {\n    // run the map function here instead so that the key is the computed one\n    result[child.key] = mapper(child);\n  });\n  return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */\n\nexport function mergeChildMappings(prev, next) {\n  prev = prev || {};\n  next = next || {};\n\n  function getValueForKey(key) {\n    return key in next ? next[key] : prev[key];\n  } // For each key of `next`, the list of keys to insert before that key in\n  // the combined list\n\n\n  var nextKeysPending = Object.create(null);\n  var pendingKeys = [];\n\n  for (var prevKey in prev) {\n    if (prevKey in next) {\n      if (pendingKeys.length) {\n        nextKeysPending[prevKey] = pendingKeys;\n        pendingKeys = [];\n      }\n    } else {\n      pendingKeys.push(prevKey);\n    }\n  }\n\n  var i;\n  var childMapping = {};\n\n  for (var nextKey in next) {\n    if (nextKeysPending[nextKey]) {\n      for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n        var pendingNextKey = nextKeysPending[nextKey][i];\n        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n      }\n    }\n\n    childMapping[nextKey] = getValueForKey(nextKey);\n  } // Finally, add the keys which didn't appear before any key in `next`\n\n\n  for (i = 0; i < pendingKeys.length; i++) {\n    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n  }\n\n  return childMapping;\n}\n\nfunction getProp(child, prop, props) {\n  return props[prop] != null ? props[prop] : child.props[prop];\n}\n\nexport function getInitialChildMapping(props, onExited) {\n  return getChildMapping(props.children, function (child) {\n    return cloneElement(child, {\n      onExited: onExited.bind(null, child),\n      in: true,\n      appear: getProp(child, 'appear', props),\n      enter: getProp(child, 'enter', props),\n      exit: getProp(child, 'exit', props)\n    });\n  });\n}\nexport function getNextChildMapping(nextProps, prevChildMapping, onExited) {\n  var nextChildMapping = getChildMapping(nextProps.children);\n  var children = mergeChildMappings(prevChildMapping, nextChildMapping);\n  Object.keys(children).forEach(function (key) {\n    var child = children[key];\n    if (!isValidElement(child)) return;\n    var hasPrev = (key in prevChildMapping);\n    var hasNext = (key in nextChildMapping);\n    var prevChild = prevChildMapping[key];\n    var isLeaving = isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)\n\n    if (hasNext && (!hasPrev || isLeaving)) {\n      // console.log('entering', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: true,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    } else if (!hasNext && hasPrev && !isLeaving) {\n      // item is old (exiting)\n      // console.log('leaving', key)\n      children[key] = cloneElement(child, {\n        in: false\n      });\n    } else if (hasNext && hasPrev && isValidElement(prevChild)) {\n      // item hasn't changed transition states\n      // copy over the last transition props;\n      // console.log('unchanged', key)\n      children[key] = cloneElement(child, {\n        onExited: onExited.bind(null, child),\n        in: prevChild.props.in,\n        exit: getProp(child, 'exit', nextProps),\n        enter: getProp(child, 'enter', nextProps)\n      });\n    }\n  });\n  return children;\n}","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { getChildMapping, getInitialChildMapping, getNextChildMapping } from './utils/ChildMapping';\n\nvar values = Object.values || function (obj) {\n  return Object.keys(obj).map(function (k) {\n    return obj[k];\n  });\n};\n\nvar defaultProps = {\n  component: 'div',\n  childFactory: function childFactory(child) {\n    return child;\n  }\n};\n/**\n * The `<TransitionGroup>` component manages a set of transition components\n * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition\n * components, `<TransitionGroup>` is a state machine for managing the mounting\n * and unmounting of components over time.\n *\n * Consider the example below. As items are removed or added to the TodoList the\n * `in` prop is toggled automatically by the `<TransitionGroup>`.\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual transition\n * component. This means you can mix and match animations across different list\n * items.\n */\n\nvar TransitionGroup = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(TransitionGroup, _React$Component);\n\n  function TransitionGroup(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n\n    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear\n\n\n    _this.state = {\n      contextValue: {\n        isMounting: true\n      },\n      handleExited: handleExited,\n      firstRender: true\n    };\n    return _this;\n  }\n\n  var _proto = TransitionGroup.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.mounted = true;\n    this.setState({\n      contextValue: {\n        isMounting: false\n      }\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.mounted = false;\n  };\n\n  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {\n    var prevChildMapping = _ref.children,\n        handleExited = _ref.handleExited,\n        firstRender = _ref.firstRender;\n    return {\n      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),\n      firstRender: false\n    };\n  } // node is `undefined` when user provided `nodeRef` prop\n  ;\n\n  _proto.handleExited = function handleExited(child, node) {\n    var currentChildMapping = getChildMapping(this.props.children);\n    if (child.key in currentChildMapping) return;\n\n    if (child.props.onExited) {\n      child.props.onExited(node);\n    }\n\n    if (this.mounted) {\n      this.setState(function (state) {\n        var children = _extends({}, state.children);\n\n        delete children[child.key];\n        return {\n          children: children\n        };\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        Component = _this$props.component,\n        childFactory = _this$props.childFactory,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"component\", \"childFactory\"]);\n\n    var contextValue = this.state.contextValue;\n    var children = values(this.state.children).map(childFactory);\n    delete props.appear;\n    delete props.enter;\n    delete props.exit;\n\n    if (Component === null) {\n      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n        value: contextValue\n      }, children);\n    }\n\n    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {\n      value: contextValue\n    }, /*#__PURE__*/React.createElement(Component, props, children));\n  };\n\n  return TransitionGroup;\n}(React.Component);\n\nTransitionGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * `<TransitionGroup>` renders a `<div>` by default. You can change this\n   * behavior by providing a `component` prop.\n   * If you use React v16+ and would like to avoid a wrapping `<div>` element\n   * you can pass in `component={null}`. This is useful if the wrapping div\n   * borks your css styles.\n   */\n  component: PropTypes.any,\n\n  /**\n   * A set of `<Transition>` components, that are toggled `in` and out as they\n   * leave. the `<TransitionGroup>` will inject specific transition props, so\n   * remember to spread them through if you are wrapping the `<Transition>` as\n   * with our `<Fade>` example.\n   *\n   * While this component is meant for multiple `Transition` or `CSSTransition`\n   * children, sometimes you may want to have a single transition child with\n   * content that you want to be transitioned out and in when you change it\n   * (e.g. routes, images etc.) In that case you can change the `key` prop of\n   * the transition child as you change its content, this will cause\n   * `TransitionGroup` to transition the child out and back in.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A convenience prop that enables or disables appear animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables enter animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * A convenience prop that enables or disables exit animations\n   * for all children. Note that specifying this will override any defaults set\n   * on individual children Transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * You may need to apply reactive updates to a child as it is exiting.\n   * This is generally done by using `cloneElement` however in the case of an exiting\n   * child the element has already been removed and not accessible to the consumer.\n   *\n   * If you do need to update a child as it leaves you can provide a `childFactory`\n   * to wrap every child, even the ones that are leaving.\n   *\n   * @type Function(child: ReactElement) -> ReactElement\n   */\n  childFactory: PropTypes.func\n} : {};\nTransitionGroup.defaultProps = defaultProps;\nexport default TransitionGroup;","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","function replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nexport default function removeClass(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}","export default {\n  disabled: false\n};","export var forceReflow = function forceReflow(node) {\n  return node.scrollTop;\n};","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport config from './config';\nimport { timeoutsShape } from './utils/PropTypes';\nimport TransitionGroupContext from './TransitionGroupContext';\nimport { forceReflow } from './utils/reflow';\nexport var UNMOUNTED = 'unmounted';\nexport var EXITED = 'exited';\nexport var ENTERING = 'entering';\nexport var ENTERED = 'entered';\nexport var EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        if (this.props.unmountOnExit || this.props.mountOnEnter) {\n          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749\n          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.\n          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.\n\n          if (node) forceReflow(node);\n        }\n\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        _in = _this$props.in,\n        _mountOnEnter = _this$props.mountOnEnter,\n        _unmountOnExit = _this$props.unmountOnExit,\n        _appear = _this$props.appear,\n        _enter = _this$props.enter,\n        _exit = _this$props.exit,\n        _timeout = _this$props.timeout,\n        _addEndListener = _this$props.addEndListener,\n        _onEnter = _this$props.onEnter,\n        _onEntering = _this$props.onEntering,\n        _onEntered = _this$props.onEntered,\n        _onExit = _this$props.onExit,\n        _onExiting = _this$props.onExiting,\n        _onExited = _this$props.onExited,\n        _nodeRef = _this$props.nodeRef,\n        childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      React.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : React.cloneElement(React.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(React.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * A React reference to DOM element that need to transition:\n   * https://stackoverflow.com/a/51127130/4671932\n   *\n   *   - When `nodeRef` prop is used, `node` is not passed to callback functions\n   *      (e.g. `onEnter`) because user already has direct access to the node.\n   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new\n   *     `nodeRef` need to be provided to `Transition` with changed `key` prop\n   *     (see\n   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).\n   */\n  nodeRef: PropTypes.shape({\n    current: typeof Element === 'undefined' ? PropTypes.any : function (propValue, key, componentName, location, propFullName, secret) {\n      var value = propValue[key];\n      return PropTypes.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);\n    }\n  }),\n\n  /**\n   * A `function` child can be used instead of a React element. This function is\n   * called with the current transition status (`'entering'`, `'entered'`,\n   * `'exiting'`, `'exited'`), which can be used to apply context\n   * specific props to a component.\n   *\n   * ```jsx\n   * <Transition in={this.state.in} timeout={150}>\n   *   {state => (\n   *     <MyComponent className={`fade fade-${state}`} />\n   *   )}\n   * </Transition>\n   * ```\n   */\n  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,\n\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in: PropTypes.bool,\n\n  /**\n   * By default the child component is mounted immediately along with\n   * the parent `Transition` component. If you want to \"lazy mount\" the component on the\n   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay\n   * mounted, even on \"exited\", unless you also specify `unmountOnExit`.\n   */\n  mountOnEnter: PropTypes.bool,\n\n  /**\n   * By default the child component stays mounted after it reaches the `'exited'` state.\n   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.\n   */\n  unmountOnExit: PropTypes.bool,\n\n  /**\n   * By default the child component does not perform the enter transition when\n   * it first mounts, regardless of the value of `in`. If you want this\n   * behavior, set both `appear` and `in` to `true`.\n   *\n   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop\n   * > only adds an additional enter transition. However, in the\n   * > `<CSSTransition>` component that first enter transition does result in\n   * > additional `.appear-*` classes, that way you can choose to style it\n   * > differently.\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * Enable or disable enter transitions.\n   */\n  enter: PropTypes.bool,\n\n  /**\n   * Enable or disable exit transitions.\n   */\n  exit: PropTypes.bool,\n\n  /**\n   * The duration of the transition, in milliseconds.\n   * Required unless `addEndListener` is provided.\n   *\n   * You may specify a single timeout for all transitions:\n   *\n   * ```jsx\n   * timeout={500}\n   * ```\n   *\n   * or individually:\n   *\n   * ```jsx\n   * timeout={{\n   *  appear: 500,\n   *  enter: 300,\n   *  exit: 500,\n   * }}\n   * ```\n   *\n   * - `appear` defaults to the value of `enter`\n   * - `enter` defaults to `0`\n   * - `exit` defaults to `0`\n   *\n   * @type {number | { enter?: number, exit?: number, appear?: number }}\n   */\n  timeout: function timeout(props) {\n    var pt = timeoutsShape;\n    if (!props.addEndListener) pt = pt.isRequired;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return pt.apply(void 0, [props].concat(args));\n  },\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning\n   * DOM node and a `done` callback. Allows for more fine grained transition end\n   * logic. Timeouts are still used as a fallback if provided.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * ```jsx\n   * addEndListener={(node, done) => {\n   *   // use the css transitionend event to mark the finish of a transition\n   *   node.addEventListener('transitionend', done, false);\n   * }}\n   * ```\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Callback fired before the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entering\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * Callback fired after the \"entered\" status is applied. An extra parameter\n   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool) -> void\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * Callback fired before the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exiting\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * Callback fired after the \"exited\" status is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement) -> void\n   */\n  onExited: PropTypes.func\n} : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nexport default Transition;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\nimport { forceReflow } from './utils/reflow';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      if (node) forceReflow(node);\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","import hasClass from './hasClass';\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nexport default function addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}","/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nexport default function hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}","import { useState } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deleteTodo, toggleComplete, updateTodo } from \"./store\";\r\n\r\nfunction TodoList({ todos }) {\r\n  const dispatch = useDispatch();\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [editingText, setEditingText] = useState(\"\");\r\n\r\n  const startEditing = (id, title) => {\r\n    setEditingId(id);\r\n    setEditingText(title);\r\n  };\r\n\r\n  const saveEdit = (id) => {\r\n    dispatch(updateTodo({ id, title: editingText }));\r\n    setEditingId(null);\r\n    setEditingText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>My Todos</h2>\r\n      {todos.length === 0 ? (\r\n        <p>No todos left. Add some tasks!</p>\r\n      ) : (\r\n        <TransitionGroup component=\"ul\">\r\n          {todos.map((todo) => (\r\n            <CSSTransition key={todo.id} timeout={500} classNames=\"fade\">\r\n              <li key={todo.id} className={todo.completed ? \"completed\" : \"\"}>\r\n                {editingId === todo.id ? (\r\n                  <>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editingText}\r\n                      onChange={(e) => setEditingText(e.target.value)}\r\n                      onKeyPress={(e) => {\r\n                        if (e.key === \"Enter\") saveEdit(todo.id);\r\n                      }}\r\n                    />\r\n                    <button onClick={() => saveEdit(todo.id)}>Save</button>\r\n                    <button onClick={() => setEditingId(null)}>Cancel</button>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    {todo.title}\r\n                    <button onClick={() => dispatch(deleteTodo(todo.id))}>\r\n                      Delete\r\n                    </button>\r\n                    <button\r\n                      className=\"complete\"\r\n                      onClick={() => dispatch(toggleComplete(todo.id))}\r\n                    >\r\n                      {todo.completed ? \"Undo\" : \"Complete\"}\r\n                    </button>\r\n                    <button onClick={() => startEditing(todo.id, todo.title)}>\r\n                      Edit\r\n                    </button>\r\n                  </>\r\n                )}\r\n              </li>\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n"],"names":["_objectWithoutPropertiesLoose","r","e","t","n","hasOwnProperty","call","indexOf","_extends","Object","assign","bind","arguments","length","apply","_setPrototypeOf","setPrototypeOf","__proto__","_inheritsLoose","o","prototype","create","constructor","React","getChildMapping","children","mapFn","result","Children","map","c","forEach","child","key","isValidElement","mapper","getProp","prop","props","getNextChildMapping","nextProps","prevChildMapping","onExited","nextChildMapping","prev","next","getValueForKey","i","nextKeysPending","pendingKeys","prevKey","push","childMapping","nextKey","pendingNextKey","mergeChildMappings","keys","hasPrev","hasNext","prevChild","isLeaving","in","cloneElement","exit","enter","values","obj","k","TransitionGroup","_React$Component","context","_this","handleExited","this","ReferenceError","_assertThisInitialized","state","contextValue","isMounting","firstRender","_proto","componentDidMount","mounted","setState","componentWillUnmount","getDerivedStateFromProps","_ref","appear","node","currentChildMapping","render","_this$props","Component","component","childFactory","TransitionGroupContext","Provider","value","propTypes","defaultProps","replaceClassName","origClass","classToRemove","replace","RegExp","forceReflow","scrollTop","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","initialStatus","appearStatus","unmountOnExit","mountOnEnter","status","nextCallback","prevState","updateStatus","componentDidUpdate","prevProps","nextStatus","cancelNextCallback","getTimeouts","timeout","undefined","mounting","nodeRef","current","ReactDOM","performEnter","performExit","_this2","appearing","_ref2","maybeNode","maybeAppearing","timeouts","enterTimeout","config","safeSetState","onEntered","onEnter","onEntering","onTransitionEnd","_this3","onExit","onExiting","cancel","nextState","callback","setNextCallback","_this4","active","event","handler","doesNotHaveTimeoutOrListener","addEndListener","_ref3","maybeNextCallback","setTimeout","childProps","only","noop","contextType","removeClass","classes","split","className","element","classList","remove","setAttribute","baseVal","CSSTransition","_len","args","Array","_key","concat","appliedClasses","_this$resolveArgument","resolveArguments","removeClasses","addClass","_this$resolveArgument2","type","_this$resolveArgument3","getClassNames","classNames","isStringClassNames","baseClassName","activeClassName","doneClassName","phase","add","contains","hasClass","_addClass","_this$appliedClasses$","base","done","todos","dispatch","useDispatch","editingId","setEditingId","useState","editingText","setEditingText","saveEdit","id","updateTodo","title","_jsxs","_jsx","todo","completed","_Fragment","onChange","target","onKeyPress","onClick","deleteTodo","toggleComplete","startEditing"],"sourceRoot":""}